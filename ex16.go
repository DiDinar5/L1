package main

import (
	"fmt"
)

// Quicksort реализует алгоритм быстрой сортировки.
// Аргументы: a - срез, который нужно отсортировать, lo - индекс начала среза, hi - индекс конца среза.
func Quicksort(a []int, lo, hi int) {
	if lo < hi {
		// p - индекс опорного элемента после разделения
		p := partition(a, lo, hi)
		// Рекурсивно применяем сортировку к подсрезам
		Quicksort(a, lo, p-1)
		Quicksort(a, p+1, hi)
	}
}

// partition выполняет разделение массива.
func partition(a []int, lo, hi int) int {
	// Выбираем опорный элемент
	pivot := a[hi]
	// i - индекс меньшего элемента
	i := lo
	for j := lo; j < hi; j++ {
		// Если текущий элемент меньше или равен опорному
		if a[j] <= pivot {
			// Меняем местами a[i] и a[j]
			a[i], a[j] = a[j], a[i]
			i++
		}
	}
	// Меняем местами опорный элемент с элементом на позиции i
	a[i], a[hi] = a[hi], a[i]
	// Возвращаем индекс опорного элемента
	return i
}

func main() {
	a := []int{10, 7, 8, 9, 1, 5}
	Quicksort(a, 0, len(a)-1)
	fmt.Println("Отсортированный массив:", a)
}
